<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ORM-Monitor</name>
    </assembly>
    <members>
        <member name="T:ORM_Monitor.TaskEvent">
            <inheritdoc cref="T:ORM_Monitor.TaskEventArgs" />
            <summary>
              Task_Event
            </summary>
            <summary>
              Task_Event
            </summary>
        </member>
        <member name="M:ORM_Monitor.TaskEvent.AsyncMonitor">
            <summary>
              Asyncronous delegate monitor.
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:ORM_Monitor.TaskEvent.#ctor(System.TimeSpan)">
            <inheritdoc />
            <summary>
              Constructor
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:ORM_Monitor.TaskEvent.#ctor(System.Double)">
            <inheritdoc />
            <summary>
              Default Constructor
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="P:ORM_Monitor.TaskEvent.OnCanceled">
            <summary>
              OnCanceled
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEvent.OnCompleted">
            <summary>
              OnCompleted
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEvent.OnProgressChanged">
            <summary>
              OnProgressChanged
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEvent.OnRunning">
            <summary>
              OnRunning
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEvent.OnTimedout">
            <summary>
              OnTimedout
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEvent.OnExited">
            <summary>
              OnExited
            </summary>
        </member>
        <member name="F:ORM_Monitor.TaskEvent.canceledEvent">
            <summary>
              CanceledEvent
            </summary>
        </member>
        <member name="F:ORM_Monitor.TaskEvent.completedEvent">
            <summary>
              CompletedEvent
            </summary>
        </member>
        <member name="F:ORM_Monitor.TaskEvent.progressChangedEvent">
            <summary>
              ProgressChangedEvent
            </summary>
        </member>
        <member name="F:ORM_Monitor.TaskEvent.runningEvent">
            <summary>
              RunningEvent
            </summary>
        </member>
        <member name="F:ORM_Monitor.TaskEvent.timedoutEvent">
            <summary>
              TimedoutEvent
            </summary>
        </member>
        <member name="F:ORM_Monitor.TaskEvent.exitedEvent">
            <summary>
              ExitedEvent
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEvent.IsDisposed">
            <summary>
              IsDisposed
            </summary>
        </member>
        <member name="M:ORM_Monitor.TaskEvent.Dispose">
            <inheritdoc />
            <summary>
              Dispose
            </summary>
        </member>
        <member name="T:ORM_Monitor.Events.CanceledEvent">
            <inheritdoc />
            <summary>
              CanceledEvent - Handler handler renamed as custom type definition by composition.
            </summary>
        </member>
        <member name="M:ORM_Monitor.Events.CanceledEvent.#ctor(ORM_Monitor.TaskEvent)">
            <inheritdoc />
            <summary>
              Constructor
            </summary>
            <param name="taskEvent"></param>
        </member>
        <member name="M:ORM_Monitor.Events.CanceledEvent.Invoke(ORM_Monitor.TaskEventArgs)">
            <inheritdoc />
            <summary>
              OnCanceledEvent
            </summary>
            <param name="tea"></param>
        </member>
        <member name="T:ORM_Monitor.Events.CompletedEvent">
            <inheritdoc />
            <summary>
              CompletedEvent - Handler handler renamed as custom type definition by composition.
            </summary>
        </member>
        <member name="M:ORM_Monitor.Events.CompletedEvent.#ctor(ORM_Monitor.TaskEvent)">
            <inheritdoc />
            <summary>
              Constructor
            </summary>
            <param name="taskEvent"></param>
        </member>
        <member name="M:ORM_Monitor.Events.CompletedEvent.Invoke(ORM_Monitor.TaskEventArgs)">
            <inheritdoc />
            <summary>
              OnCompletedEvent
            </summary>
            <param name="tea"></param>
        </member>
        <member name="T:ORM_Monitor.Events.ExitedEvent">
            <inheritdoc />
            <summary>
              RunningEvent - Handler handler renamed as custom type definition by composition.
            </summary>
        </member>
        <member name="M:ORM_Monitor.Events.ExitedEvent.#ctor(ORM_Monitor.TaskEvent)">
            <inheritdoc />
            <summary>
              Constructor
            </summary>
            <param name="taskEvent"></param>
        </member>
        <member name="M:ORM_Monitor.Events.ExitedEvent.Invoke(ORM_Monitor.TaskEventArgs)">
            <inheritdoc />
            <summary>
              OnExitedEvent
            </summary>
            <param name="tea"></param>
        </member>
        <member name="T:ORM_Monitor.Events.ProgressChangedEvent">
            <inheritdoc />
            <summary>
              RunningEvent - Handler handler renamed as custom type definition by composition.
            </summary>
        </member>
        <member name="M:ORM_Monitor.Events.ProgressChangedEvent.#ctor(ORM_Monitor.TaskEvent)">
            <inheritdoc />
            <summary>
              Constructor
            </summary>
            <param name="taskEvent"></param>
        </member>
        <member name="M:ORM_Monitor.Events.ProgressChangedEvent.Invoke(ORM_Monitor.TaskEventArgs)">
            <inheritdoc />
            <summary>
              OnCanceledEvent
            </summary>
            <param name="tea"></param>
        </member>
        <member name="T:ORM_Monitor.Events.RunningEvent">
            <inheritdoc />
            <summary>
              RunningEvent - Event handler renamed as custom type definition by composition.
            </summary>
        </member>
        <member name="M:ORM_Monitor.Events.RunningEvent.#ctor(ORM_Monitor.TaskEvent)">
            <inheritdoc />
            <summary>
              Constructor
            </summary>
            <param name="taskEvent"></param>
        </member>
        <member name="M:ORM_Monitor.Events.RunningEvent.Invoke(ORM_Monitor.TaskEventArgs)">
            <inheritdoc />
            <summary>
              OnRunningEvent
            </summary>
            <param name="tea"></param>
        </member>
        <member name="T:ORM_Monitor.Events.TimedoutEvent">
            <inheritdoc />
            <summary>
              TimeoutEvent - Handler handler renamed as custom type definition by composition.
            </summary>
        </member>
        <member name="M:ORM_Monitor.Events.TimedoutEvent.#ctor(ORM_Monitor.TaskEvent)">
            <inheritdoc />
            <summary>
              Constructor
            </summary>
            <param name="taskEvent"></param>
        </member>
        <member name="M:ORM_Monitor.Events.TimedoutEvent.Invoke(ORM_Monitor.TaskEventArgs)">
            <inheritdoc />
            <summary>
              OnTimedoutEvent
            </summary>
            <param name="tea"></param>
        </member>
        <member name="T:ORM_Monitor.TaskEventArgs">
            <inheritdoc />
            <summary>
              TaskEventArgs
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEventArgs.Task">
            <summary>
              Task
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEventArgs.TokenSource">
            <summary>
              TokenSource
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEventArgs.Duration">
            <summary>
              Duration
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEventArgs.Status">
            <summary>
              Status
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEventArgs.Name">
            <summary>
              Name
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEventArgs.Expression">
            <summary>
              Expression
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEventArgs.Tag">
            <summary>
              Tag
            </summary>
        </member>
        <member name="T:ORM_Monitor.TaskEventHandler">
            <summary>
              TaskEventHandler
            </summary>
        </member>
        <member name="M:ORM_Monitor.TaskEventHandler.#ctor(ORM_Monitor.TaskEvent)">
            <summary>
              Constructor
            </summary>
            <param name="taskEvent"></param>
        </member>
        <member name="F:ORM_Monitor.TaskEventHandler.TaskEvent">
            <summary>
              TaskEvent
            </summary>
        </member>
        <member name="F:ORM_Monitor.TaskEventHandler._myEvent">
            <summary>
              Backing Field for Handler
            </summary>
        </member>
        <member name="E:ORM_Monitor.TaskEventHandler.Handler">
            <summary>
              Handler
            </summary>
        </member>
        <member name="P:ORM_Monitor.TaskEventHandler.IsSubscribed">
            <summary>
              IsSubscribed
            </summary>
        </member>
        <member name="M:ORM_Monitor.TaskEventHandler.Invoke(ORM_Monitor.TaskEventArgs)">
            <summary>
              Invoke
            </summary>
            <param name="tea"></param>
        </member>
        <member name="M:ORM_Monitor.TaskEventHandler.Dispose">
            <inheritdoc />
            <summary>
              Dispose
            </summary>
        </member>
    </members>
</doc>
